// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

model ResetPasswordLink {
  id        Int       @id @default(autoincrement())
  accountId Int
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  expiresAt DateTime
  token     String    @unique @db.VarChar(50)
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
}

// ... existing code ...
model VerificationLink {
  id        Int      @id @default(autoincrement())
  accountId Int
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime // programmatically generated to be at later date

  token       String    @unique @db.VarChar(50)
  isActivated Boolean   @default(false)
  activatedAt DateTime?
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AccountType {
  ADMIN
  USER
  AGENCY
}

model Session {
  // id        Int      @id @default(autoincrement())
  id              String   @id
  accountId       Int
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  lastActiveAt    DateTime @default(now())
  lastValidatedAt DateTime @default(now())
  account         Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Account {
  id             Int      @id @default(autoincrement())
  uuid           String   @unique @default(uuid()) @db.Char(36)
  email          String   @unique @db.VarChar(60)
  hashedPassword String?  @db.VarChar(100) // we need 97 for the hash, but extra for just in case
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Other fields
  role              AccountType         @default(USER)
  emailVerified     DateTime?
  sessions          Session[]
  verificationLink  VerificationLink[]
  agency            Agency?
  user              User?
  listingViews      ListingView[]
  resetPasswordLink ResetPasswordLink[]
}

model Agency {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @db.Char(36) // will be inhereited from Account
  accountId Int      @unique
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Owner info for when Adresa needs to contact the agency
  ownerFirstName         String? @db.VarChar(50)
  ownerLastName          String? @db.VarChar(50)
  ownerEmail             String? @db.VarChar(60)
  ownerPhone             String? @db.VarChar(20)
  // Contact Info for when Users need to contact the agency
  contactPersonFullName  String? @db.VarChar(50)
  contactPersonEmail     String? @db.VarChar(60)
  contactPersonPhone     String? @db.VarChar(20)
  preferredContactMethod String? @db.VarChar(10) // email, phone, both
  contactHours           String? @db.VarChar(200)

  // Unique fields
  name             String?   @unique @db.VarChar(80)
  slug             String?   @unique @db.VarChar(80)
  address          String?   @db.VarChar(150)
  website          String?   @db.VarChar(50)
  phone            String?   @db.VarChar(20)
  phoneVerified    DateTime?
  logo             Json?
  workHours        String?   @db.VarChar(250) // Text area so we allow more characters
  gpsLocation      String?   @db.VarChar(30) // lng,lat (6 decimal rounded) 
  description      String?   @db.VarChar(2000)
  shortDescription String?   @db.VarChar(500)
  branding         String?   @db.VarChar(200) // JSON sting that represents colors picked

  // Optional fields
  // isProfileComplete     Boolean        @default(false)

  listings      Listing[]
  notifications Notification[]
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @db.Char(36) // will be inhereited from Account
  accountId Int      @unique
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique fields
  firstName              String?   @db.VarChar(50)
  lastName               String?   @db.VarChar(50)
  phone                  String?   @db.VarChar(20)
  phoneVerified          DateTime?
  pictureUrl             String?   @db.VarChar(200)
  // email is retrieved from account
  // Contact info
  contactName            String?   @db.VarChar(50)
  contactPhone           String?   @db.VarChar(20)
  contactPhoneVerified   DateTime?
  contactEmail           String?   @db.VarChar(60)
  contactEmailVerified   DateTime?
  contactHours           String?   @db.VarChar(200)
  preferredContactMethod String?   @default("both") @db.VarChar(10) // email, phone, both

  favorites     Favorite[]
  savedSearches SavedSearch[]
  listings      Listing[]
  notifications Notification[]
}

model SavedSearch {
  id                   Int      @id @default(autoincrement())
  userId               Int
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                 String   @db.VarChar(65)
  img                  String? // optional image
  isNotificationOn     Boolean  @default(false) // whether notifications are active
  notificationInterval String   @db.VarChar(10) // e.g., daily, weekly, etc.
  searchParams         String   @db.VarChar(400) // URL or string for query params like 'rooms=2&kitchen=3'
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  lastOpenedAt         DateTime @default(now())
}

model Counter {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(50)
  value Int // should have 6 digits
}

enum FeatureCategory {
  INTERNAL
  EXTERNAL

  UTILITIES
  CONSTRUCTION
  SUITABLE_FOR
  RESIDENTAL_OTHER
  OTHER
}

enum PropertyCategory {
  residential
  commercial
  land
  other
}

enum ApplicablePropertyCategory {
  all
  residential
  commercial
  land
  other
}

model ListingFeature {
  id        Int      @id @default(autoincrement())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId Int
  value     String?  @default("") @db.VarChar(50) // Optional value for features that need it (e.g. "2" for number of balconies)
  createdAt DateTime @default(now())

  @@unique([listingId, featureId])
}

model Feature {
  id              Int                          @id @default(autoincrement())
  name            String                       @db.VarChar(30) // Display name
  key             String                       @unique @db.VarChar(30) // Unique identifier for the feature
  category        FeatureCategory
  applicableTypes ApplicablePropertyCategory[] // Changed from ListingType[] to PropertyCategory[]
  listings        ListingFeature[]
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  isActive        Boolean                      @default(true)
}

enum PropertyType {
  // Residential types
  apartment
  house
  vacation_house

  // Commercial types
  office
  store
  warehouse
  industrial_space

  // Land types
  construction
  agricultural

  // Other types
  garage
  business
  assembly_facilities
  other
}

enum PropertyTransactionType {
  sale
  rent
}

enum LocationPrecision {
  exact
  approximate
  wide
}

enum ListingStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  INACTIVE
  // hidden, requires_payment, requires_review , needs_update
}

model Listing {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid()) @db.Char(36) // not used but here for the future if we need to scale and merge
  externalRef   String?  @default("") // External ID for importing data from other sources
  listingNumber Int      @unique @default(autoincrement()) // 6 digit number controled by counter listing-number-counter
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  dateAvailable DateTime @default(now()) // if it is in the past now() it is available
  isAvailable   Boolean  @default(true) // used for fast retieval
  // Ownership details
  userId        Int?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  agencyId      Int?
  agency        Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  queryHash       String                  @default("")
  // Main categorization (Initial step when creating a new listing)
  transactionType PropertyTransactionType // rent, sale
  category        PropertyCategory // Won't be changed later
  type            PropertyType // Can be changed later, different types of the same category

  // connection to additional data
  residential  Residential?
  commercial   Commercial?
  land         Land?
  other        Other?
  // Location Step
  municipality String?      @db.Char(5) // ID of municipality 20411
  place        String?      @db.Char(5) // ID of village or town
  address      String?      @db.VarChar(150) // the name of street and number
  fullAddress  String?      @default("") @db.VarChar(170) // the full address (municipality + place + district + address)

  // probably would be disabled
  district String? @db.Char(5) // ID of naseleno mesto

  // Useful for map location
  longitude         Float?
  latitude          Float?
  locationPrecision LocationPrecision @default(exact)

  // Main Characteristics
  enTitle       String? @default("") @db.VarChar(120) // Title that will show up in listing that they wanted
  mkTitle       String? @default("") @db.VarChar(120) // 
  alTitle       String? @default("") @db.VarChar(120) // 
  enDescription String? @db.VarChar(5000)
  mkDescription String? @db.VarChar(5000)
  alDescription String? @db.VarChar(5000)
  // --
  price         Int?
  previousPrice Int?
  priceHistory  Json?
  area          Int?
  // Images and Video
  mainImage     Json    @default("{}") //UploadedImageData img will be hosted elsewhere, used to showcase the listing, usually first image in array
  images        Json    @default("[]") //array of UploadedImageData JSON 
  videoLink     String? @db.VarChar(120) // youtube or vimeo for the property

  // Publishing info
  status         ListingStatus @default(DRAFT)
  substatus      String        @default("") @db.VarChar(20)
  isArchived     Boolean       @default(false)
  // isVisible      Boolean       @default(true) // user can turn it off/on which is different from isPublished
  isPaidPromo    Boolean       @default(false)
  isPublished    Boolean       @default(false) // meaning someone paid for this and its shown unless its hidden
  publishedAt    DateTime?
  publishEndDate DateTime? // usually one month after publishedAt

  // tags are something that will be calculated based on other fields
  //tags        String[]         @default([])
  favoritedBy     Favorite[]
  listingViews    ListingView[]
  viewCount       ListingViewCount?
  viewCountId     Int?              @unique
  // extract this into user as separate values
  listingFeatures ListingFeature[]

  // 
  professionalPromotion   ProfessionalPromotion?
  professionalPromotionId Int?                   @unique

  // @@index([transactionType, category]) // Most basic filter combination
  // @@index([transactionType, price]) // Price ranges within rent/sale
  // @@index([municipality, transactionType]) // Location-based searches
  // // Secondary combinations for specific search patterns
  // @@index([category, type]) // Type-specific searches
  // @@index([municipality, price]) // Location + price ranges
  // // Optional: Compound index for complex queries
  // @@index([transactionType, municipality, category]) // Complex but common filter combination
  // For price range queries
  // @@index([transactionType, price, municipality])

  // // For property type searches
  // @@index([transactionType, category, propertyType])

  // Most important search pattern indexes    
  // @@index([transactionType, municipality])
  // @@index([transactionType, price])
  // @@index([transactionType, category])

  // // Complex search support
  // @@index([transactionType, municipality, category])
  // @@index([municipality, price])
}

model ProfessionalPromotion {
  id        Int      @id @default(autoincrement())
  listingId Int      @unique
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ResidentalPropertyType {
  apartment
  house
  vacation_house
  other
}

model Residential {
  id        Int     @id @default(autoincrement())
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int     @unique

  propertyType ResidentalPropertyType
  floor        String?                @db.VarChar(20)
  totalFloors  Int? // should this be free style
  orientation  String?                @db.VarChar(10) //  'north', 'south', 'east', 'west', 'north-east', 'north-west', 'south-east', 'south-west'
  zone         String?                @db.VarChar(16) // residential, commercial, agricultural, industrial, recreational, unincorporated

  constructionYear  Int?
  totalPropertyArea Int? // in square meters, besides the area, extra size including the yard and other 

  isFurnished      Boolean @default(false)
  isForStudents    Boolean @default(false)
  isForHolidayHome Boolean @default(false)
  commonExpenses   Int?
  heatingType      String? @db.VarChar(16) // 'autonomous', 'central', 'air-condition', 'none'
  heatingMedium    String? @db.VarChar(16) // 'oil', 'natural gas', 'diesel', 'electricity', 'wood', 'solar', 'geothermal', 'heat pump'

  // rooms
  bedroomCount    Int @default(0)
  bathroomCount   Int @default(0)
  wcCount         Int @default(0)
  kitchenCount    Int @default(0)
  livingRoomCount Int @default(0)
}

enum CommercialPropertyType {
  office
  store
  warehouse
  industrial_space
  other
}

model Commercial {
  id        Int     @id @default(autoincrement())
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int     @unique

  propertyType CommercialPropertyType // office, retail, warehouse, etc.

  constructionYear  Int?
  totalPropertyArea Int? // in square meters
  floor             Int?

  isCornerProperty Boolean @default(false)
  isOnTopFloor     Boolean @default(false)

  accessFrom String? @db.VarChar(16) // paved/asphalt/pedestrian/dirt road/ sea/ other / no road access

  // Additional
  commonExpenses Int?
  heatingType    String? @db.VarChar(16) // 'autonomous', 'central', 'air-condition', 'none'
  heatingMedium  String? @db.VarChar(16) // 'oil', 'natural gas', 'diesel', 'electricity', 'wood', 'solar', 'geothermal', 'heat pump'

  wcCount Int @default(0)
}

enum LandPropertyType {
  construction
  agricultural
  other
}

model Land {
  id        Int     @id @default(autoincrement())
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int     @unique

  propertyType LandPropertyType

  isCornerProperty Boolean @default(false)
  orientation      String?
  zone             String? @db.VarChar(16) // residential, commercial, agricultural, etc.
  accessFrom       String? @db.VarChar(16) //  paved/asphalt/pedestrian/dirt road/ sea/ other / no road access
  slope            String? @db.VarChar(10) // flat/ inclined / steep
}

enum OtherPropertyType {
  garage
  storage
  other
}

model Other {
  id        Int     @id @default(autoincrement())
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int     @unique

  propertyType OtherPropertyType

  accessFrom        String? @db.VarChar(16) // paved/asphalt/pedestrian/dirt road/ sea/ other / no road access
  totalPropertyArea Int? // in square meters
}

model ListingView {
  id        Int     @id @default(autoincrement())
  listingId Int
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  // Who
  accountId Int?
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

  locale     String?
  ipAddress  String?
  ipInfo     Json?
  deviceInfo Json?
  // How many times
  // When
  viewedAt   DateTime @default(now())
}

model ListingViewCount {
  id        Int     @id @default(autoincrement())
  listingId Int     @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  count     Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  listingId Int
  createdAt DateTime @default(now())

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId]) // Ensure a user can't favorite the same listing twice
}

enum NotificationType {
  // Listing Related
  LISTING_PUBLISHED // When a listing goes live
  LISTING_EXPIRED // When a listing's publication period ends
  LISTING_NEEDS_REVIEW // When a listing needs admin review
  PRICE_CHANGED // When price changes on a favorited listing

  // Saved Search Related
  NEW_LISTING_MATCH // When new listing matches saved search criteria
  PRICE_DROP_MATCH // When price drops on a listing matching saved search

  // User Account Related
  ACCOUNT_VERIFIED // When email/phone verification is complete
  PASSWORD_CHANGED // When password is changed
  LOGIN_ATTEMPT // Suspicious login attempt

  // Agency Related
  AGENCY_VERIFIED // When agency verification is complete
  SUBSCRIPTION_EXPIRING // When agency subscription is about to expire

  // System Related
  MAINTENANCE_ALERT // System maintenance notifications
  FEATURE_UPDATE // New feature announcements
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  agencyId  Int?
  agency    Agency?          @relation(fields: [agencyId], references: [id])
  type      NotificationType
  message   String           @db.VarChar(200)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}
